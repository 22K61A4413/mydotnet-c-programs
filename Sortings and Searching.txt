Sortings and Searching


1)Binary Search


using System;
class BinarySearchExample
{
    static int BinarySearch(int[] arr, int target)
    {
        int left = 0;
        int right = arr.Length - 1;
        while (left <= right)
        {
            int mid = (left + right) / 2;
            if (arr[mid] == target)
                return mid;
            if (arr[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return -1;
    }
    static void Main()
    {
        int[] numbers = { 10, 20, 30, 40, 50, 60, 70 };
        Console.Write("Enter the number to search: ");
        int target = Convert.ToInt32(Console.ReadLine());
        int index = BinarySearch(numbers, target);
        if (index != -1)
            Console.WriteLine($"Element found at index {index}");
        else
            Console.WriteLine("Element not found.");
    }
}

output:-
Enter the number to search: 50
Element found at index 4


2)Bubble Sort


using System;
class BubbleSortExample
{
    static void BubbleSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 0; i < n - 1; i++)
        {
            for (int j = 0; j < n - i - 1; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
    static void Main()
    {
        int[] numbers = { 64, 34, 25, 12, 22, 11, 90 };
        Console.WriteLine("Original array:");
        Console.WriteLine(string.Join(" ", numbers));
        BubbleSort(numbers);
        Console.WriteLine("Sorted array:");
        Console.WriteLine(string.Join(" ", numbers));
    }
}


output:-

Original array:
64 34 25 12 22 11 90
Sorted array:
11 12 22 25 34 64 90


3)Selection Sort

using System;
class SelectionSortExample
{
    static void SelectionSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 0; i < n - 1; i++)
        {
            int min_index=i;
            for (int j = i+1; j < n ; j++)
            {
                if (arr[j] < arr[min_index])
                {
                    min_index=j;
                }
            }
            if(i!=min_index)
            {
                int temp = arr[i];
                arr[i] = arr[min_index];
                arr[min_index] = temp;
            }
        }
    }
    static void Main()
    {
        int[] numbers = { 64, 34, 25, 12, 22, 11, 90 };
        Console.WriteLine("Original array:");
        Console.WriteLine(string.Join(" ", numbers));
        SelectionSort(numbers);
        Console.WriteLine("Sorted array:");
        Console.WriteLine(string.Join(" ", numbers));
    }
}

output:-

Original array:
64 34 25 12 22 11 90
Sorted array:
11 12 22 25 34 64 90


4)Insertion sort


using System;
class InsertionSortExample
{
    static void InsertionSort(int[] arr)
    {
        int n = arr.Length;
        for (int i = 1; i < n; i++)
        {
            int key = arr[i];
            int j = i - 1;
            while (j >= 0 && arr[j] > key)
            {
                arr[j + 1] = arr[j];
                j--;
            }
            arr[j + 1] = key;
        }
    }
    static void Main()
    {
        int[] numbers = { 64, 34, 25, 12, 22, 11, 90 };
        Console.WriteLine("Original array:");
        Console.WriteLine(string.Join(" ", numbers));
        InsertionSort(numbers);
        Console.WriteLine("Sorted array:");
        Console.WriteLine(string.Join(" ", numbers));
    }
}


output:-

Original array:
64 34 25 12 22 11 90
Sorted array:
11 12 22 25 34 64 90
